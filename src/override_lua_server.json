{
  "Vector": {
    "description": "Vector class",
    "call": {
      "arg_names": ["x", "y", "z"],
      "args": ["float", "float", "float"],
      "description": "Vector class",
      "return": "vector"
    },
    "functions": {
      "__add": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Overloaded +. Adds vectors together",
        "return": "vector"
      },
      "__div": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Overloaded /. Divides vectors",
        "return": "vector"
      },
      "__eq": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Overloaded ==. Tests for Equality",
        "return": "bool"
      },
      "__len": {
        "args": [],
        "description": "Overloaded # returns the length of the vector",
        "return": "float"
      },
      "__mul": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Overloaded * returns the vectors multiplied together",
        "return": "vector"
      },
      "__sub": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Overloaded -. Subtracts vectors",
        "return": "vector"
      },
      "__tostring": {
        "args": [],
        "return": "string",
        "description": "Overloaded .. Converts vectors to strings"
      },
      "__unm": {
        "args": [],
        "return": "vector",
        "description": "Overloaded - operator"
      },
      "Cross": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Cross product of two vectors",
        "return": "vector"
      },
      "Dot": {
        "arg_names": ["a", "b"],
        "args": ["vector", "vector"],
        "description": "Dot product of two vectors",
        "return": "float"
      },
      "Length": {
        "args": [],
        "description": "Length of the Vector",
        "return": "float"
      },
      "Length2D": {
        "args": [],
        "description": "Length of the Vector in the XY plane",
        "return": "float"
      },
      "Normalized": {
        "args": [],
        "description": "Returns the vector normalized",
        "return": "vector"
      }
    }
  },
  "CScriptHTTPRequest": {
    "functions": {
      "Send": {
        "args": ["fun(result: CScriptHTTPResponse): void"],
        "arg_names": ["callback"],
        "description": "Send a HTTP request.",
        "return": "bool"
      },
      "SetHTTPRequestAbsoluteTimeoutMS": {
        "args": ["unsigned"],
        "arg_names": ["timeout"],
        "description": "Set the total timeout on the request.",
        "return": "bool"
      },
      "SetHTTPRequestGetOrPostParameter": {
        "args": ["string", "string"],
        "description": "Set a POST or GET parameter on the request.",
        "return": "bool"
      },
      "SetHTTPRequestHeaderValue": {
        "args": ["string", "string"],
        "description": "Set a header value on the request.",
        "return": "bool"
      },
      "SetHTTPRequestNetworkActivityTimeout": {
        "args": ["unsigned"],
        "arg_names": ["timeout"],
        "description":
          "Set the network timeout on the request - this timer is reset when any data is received.",
        "return": "bool"
      },
      "SetHTTPRequestRawPostBody": {
        "args": ["string", "string"],
        "description": "Set the literal body of a post - invalid after setting a post parameter.",
        "return": "bool"
      }
    }
  },
  "Convars": {
    "functions": {
      "RegisterCommand": {
        "args": ["cstring", "fun(commandName: cstring, ...args: string[]): void", "cstring", "int"]
      }
    }
  },
  "Global": {
    "functions": {
      "CreateHTTPRequest": {
        "arg_names": ["method", "url"]
      },
      "CreateHTTPRequestScriptVM": {
        "arg_names": ["method", "url"]
      },
      "ListenToGameEvent": {
        "args": ["cstring", "fun(event: table): void", "table"]
      },
      "PrecacheItemByNameAsync": {
        // TODO: Describe id
        "args": ["cstring", "fun(id: int): void"]
      },
      "PrecacheUnitByNameAsync": {
        // TODO: Describe id
        "args": ["cstring", "fun(id: int): void", "int"]
      },
      "EntIndexToHScript": {
        "generics": ["$return"]
      },
      "CreateUnitByName": {
        "generics": ["$return"]
      },
      "CreateUnitByNameAsync": {
        "generics": ["callback$CDOTA_BaseNPC"]
      }
    }
  },
  "CCustomGameEventManager": {
    "functions": {
      "RegisterListener": {
        "args": ["cstring", "fun(event: table): void"]
      }
    }
  },
  "CDOTA_BaseNPC": {
    "functions": {
      "Kill": {
        "arg_names": ["hAbility?", "hAttacker?"]
      }
    }
  }
}
